#pragma warning(disable:4996)
#include<iostream>
#include<algorithm>
#include<string>
#include<queue>
using namespace std;

#define NM 15

int N, M, B, A[NM][NM], blank[NM * NM][2], ans;
bool visit[NM][NM];
int dir[4][2] = { {1,0},{0,1},{-1,0},{0,-1} };

bool inRange(int x, int y) {
	return (x > 0 && y > 0 && x <= N&& y <=M);
}


void input(){
	cin >> N >> M;
	for (int i = 1; i <= N; i++)
		for (int j = 1; j <= M; j++)
			cin >> A[i][j];
}



void bfs() {
	queue<int> Q;
	int cnt = 0;
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			visit[i][j] = false;
			if (A[i][j] == 2) {
				Q.push(i);
				Q.push(j);
				visit[i][j] = true;
			}
		}
	}


	while (!Q.empty()) {
		int x = Q.front();
		Q.pop();
		int y = Q.front();
		Q.pop();
		for (int k=0; k < 4; k++) {
			int nx = dir[k][0] + x;
			int ny = dir[k][1] + y;
			if (!inRange(nx, ny) or visit[nx][ny]) continue;
			if (A[nx][ny] != 0) continue;
			visit[nx][ny] = true;
			Q.push(nx);
			Q.push(ny);
		}
	}
	//for (int i = 1; i <= N; i++) {
	//	for (int j = 1; j <= M; j++) {
	//		cout << A[i][j];

	//	}
	//	cout << endl;
	//}


	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			if ((visit[i][j] == false) && (A[i][j] == 0)) cnt++;
			

		}
	}

	ans = max(ans, cnt);
}

void dfs(int idx, int cnt) {
	if (cnt == 3) {
		bfs();
		return ;
	}

	if (idx >= B) {
		return;
	}

	A[blank[idx][0]][blank[idx][1]] = 1;
	dfs(idx + 1, cnt + 1);

	A[blank[idx][0]][blank[idx][1]] = 0;
	dfs(idx + 1, cnt);
}

void pro() {
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			if (A[i][j] == 0) {
				B++;
				blank[B][0] = i;
				blank[B][1] = j;
			}
		}
	}
	dfs(1, 0);
	cout << ans << endl;


}

int main() {	
	ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);

	input();
	pro();
	return 0;
}
